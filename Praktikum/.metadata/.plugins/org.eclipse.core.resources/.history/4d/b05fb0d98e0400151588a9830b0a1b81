package blatt9;

import java.awt.Color;

public class Sort {
	
	private Sort() {}

    public static void insertionSort(final int[] a) {

        for (int i = 1; i < a.length; i++) {
            ArrayDraw.draw(a, Color.BLUE);
            ArrayDraw.draw(a, i, Color.RED);
            int v = a[i];

            int j = i - 1;
            while (j >= 0 && a[j] > v) {
                a[j + 1] = a[j];
                j--;
            }
            a[j + 1] = v;
            ArrayDraw.draw(a, j + 1, Color.RED);

        }
        ArrayDraw.draw(a, Color.BLUE);
        ArrayDraw.showTime();
    }
    
    
    

    public static void quickSort(final int[] a) {
      //  ArrayDraw.init(a.length, a.length, "QuickSort");
        quickSort(a, 0, a.length - 1);
        ArrayDraw.showTime();
    }
    
    public static void quickSort(final int[] a, final int links,
            final int rechts) {

        int li = links;
        int re = rechts;

        while (re > li) {
            // Teileschritt:
            int i = partitionAnimated(a, li, re);
            // Herrscheschritt:
            if (i - li < re - i) {
                quickSortAnimated(a, li, i - 1);
                li = i + 1; // quicksortTailRecElim(a,i+1,re);
            } else {
                quickSortAnimated(a, i + 1, re);
                re = i - 1; // quicksortTailRecElim(a,li,i-1);
            }
        }
    }
    
    private static int partition(final int[] a, final int li, final int re) {
        int v = a[re]; // Pivotelement
        int i = li - 1;
        int j = re;
        while (true) {

            ArrayDraw.draw(a, Color.BLUE);
            do {
                i++;
            } while (a[i] < v);
            do {
                j--;
            } while (j >= li && a[j] > v);
            if (i >= j) {
                break;
            }

            // a[i] und a[j] vertauschen:
            int t = a[i];
            a[i] = a[j];
            a[j] = t;

            ArrayDraw.draw(a, i, Color.RED);
            ArrayDraw.draw(a, j, Color.RED);
        }
    
    

}
